extends layout

block content
    div(class='jumbotron')
        div(class='container')
            h1='Panel Takibi'
            p.
                Bu sayfadan güneş panellerini listeleyebilir, panellere ait detayları takip edebilirsiniz.
                Sayfadaki grafiklerden panellere ait akım, gerilim, ışık, sıcaklık ve nem
                bilgileri anlık olarak izleyebilirsiniz.

    div(class='container')
        div(class='row')
            div(class='col-md-4')
                h4 Panel Listesi

                div(class='panel panel-default')
                    table(id='panelTable' class='table table-striped table-hover')
                        thead
                            tr
                                th #
                                th Panel
                                th İzle
                        tbody

                h4(style='margin-top: 50px;') Tarih / Anlık Durum
                div(id='datepicker')

            div(class='col-md-8')
                h4(id="chartTitle") Son 1 Dakika
                div(id='chartDiv')
                div(class='row')
                    button(id='current' type='button' class='btn btn-primary' style='margin-right:10px' onclick='changeSeries(this.id)') Akım
                    button(id='voltage' type='button' class='btn btn-default' style='margin-right:10px' onclick='changeSeries(this.id)') Gerilim
                    button(id='light' type='button' class='btn btn-default' style='margin-right:10px' onclick='changeSeries(this.id)') Işık
                    button(id='temperature' type='button' class='btn btn-default' style='margin-right:10px' onclick='changeSeries(this.id)') Sıcaklık
                    button(id='moisture' type='button' class='btn btn-default' style='margin-right:10px' onclick='changeSeries(this.id)') Nem


    script.
        var chart = null;
        var selectedPanelId = null;
        var showCurrent = true;
        var seriesList = ['current', 'voltage', 'light', 'temperature', 'moisture'];
        var activeSeries = 'current';
        var dataListOfTheHistorical = [];

        var socket = io();

        socket.on('retrievePanelList', function (panelList) {
            $('#panelTable').find('> tbody > tr').remove();

            for (var i = 0; i < panelList.length; i++) {
                if (panelList[i].status) {
                    addPanelToTable(i, panelList[i]);
                }
            }
        });

        socket.emit('retrievePanelList', 0, false);

        socket.on('retrievePanelData', function (panelData) {
            if (selectedPanelId == null) return false;
            if (selectedPanelId != panelData.panelId) return false;
            if (!showCurrent) return false;

            if (!chart) {
                chart = getChart();
            }

            if (chart) {
                updateChartWithCurrentData(panelData);
            }
        });

        socket.on('addPanelDataList', function(dataList) {
            dataListOfTheHistorical = dataList;

            updateChartWithHistoricalData();
        });

        function addPanelToTable(index, panel) {
            var row = '<tr>';
            row += '<th scope="row">' + (index + 1) + '</th>';
            row += '<td>' + panel.name + '</td>';

            row += '<td>';
            row += '<button type="button" class="btn btn-default btn-xs" aria-label="Left Align" id="' + panel._id.toString() + '_show">';
            row += '<span class="glyphicon glyphicon-eye-close" aria-hidden="true" id="' + panel._id.toString() + '_glyph"></span>';
            row += '</button>';
            row += '</td>';

            row += '</tr>';

            $('#panelTable').find('> tbody:last-child').append(row);
            $('#' + panel._id.toString() + '_show').click(function () {
                showPanelDetail(panel);
            });
        }

        function showPanelDetail(panel) {
            clearChart();

            $('#panelTable').find('button').removeClass('btn-success').addClass('btn-default');
            $('#' + panel._id.toString() + '_show').removeClass('btn-default').addClass('btn-success');

            $('#panelTable').find('span').removeClass('glyphicon-eye-open').addClass('glyphicon-eye-close');
            $('#' + panel._id.toString() + '_glyph').removeClass('glyphicon-eye-close').addClass('glyphicon-eye-open');

            selectedPanelId = panel._id;

            if(!showCurrent) {
                var selectedDate = new Date($('#datepicker').datepicker( "getDate" ));
                var nextDay = addDays(selectedDate, 1);

                socket.emit('retrievePanelDataWithDate', selectedPanelId,
                        selectedDate, nextDay);
            }
        }

        function clearChart() {
            if (!chart) {
                chart = getChart();
            }

            if (chart) {
                var series = chart.series[0];
                series.setData([], true, true, true);
            }
        }

        function getChart() {
            return Highcharts.charts[0];
        }

        function updateChartWithCurrentData(panelData) {
            var x = (new Date(panelData.date)).getTime();
            var y = panelData[activeSeries];
            var pointArr, point;

            var series = chart.series[0];

            if (series.data.length <= 20) {
                pointArr = [];

                for (var i = 0; i < series.data.length; i++) {
                    point = series.data[i];
                    pointArr.push([point.x, point.y]);
                }

                pointArr.push([x, y]);

                series.setData(pointArr, true, false, true);
            } else {
                series.addPoint([x, y], true, true);
            }
        }

        function updateChartWithHistoricalData() {
            var series = chart.series[0];
            var pointArr = [];

            for(var i = 0; i < dataListOfTheHistorical.length; i++) {
                var panelData = dataListOfTheHistorical[i];

                var x = (new Date(panelData.date)).getTime();
                var y = panelData[activeSeries];
                pointArr.push([x, y]);
            }

            series.setData(pointArr, true, false, true);
        }

        function changeSeries(id) {

            for(var i = 0; i < seriesList.length; i++) {
                var btn = $('#' + seriesList[i]);
                btn.removeClass('btn-primary').removeClass('btn-default');
                btn.addClass('btn-default');
            }

            var clickedBtn = $('#' + id);
            clickedBtn.removeClass('btn-primary').removeClass('btn-default');
            clickedBtn.addClass('btn-primary');

            activeSeries = id;
            clearChart();

            if(!showCurrent) {
                updateChartWithHistoricalData();
            }
        }

        function getToday() {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();

            if (dd < 10) {
                dd = '0' + dd
            }

            if (mm < 10) {
                mm = '0' + mm
            }

            return mm + '/' + dd + '/' + yyyy;
        }

        function addDays(date, days) {
            var result = new Date(date);
            result.setDate(date.getDate() + days);
            return result;
        }

        $('#chartDiv').highcharts({
            chart: {
                type: 'area',
                animation: Highcharts.svg,
                ignoreHiddenSeries: false,
                height: 400
            },
            title: {
                text: ''
            },
            xAxis: {
                type: 'datetime'
            },
            yAxis: {
                title: {
                    text: 'Değer'
                }
            },
            tooltip: {
                formatter: function () {
                    return Highcharts.dateFormat('%d-%m-%Y %H:%M:%S', this.x) + '<br/>'
                            + Highcharts.numberFormat(this.y, 2);
                }
            },
            series: [{
                visible: true,
                data: []
            }],
            legend: {
                enabled: false
            }
        });

        $.datepicker._gotoToday = function() {
            clearChart();

            var chartTitle = document.getElementById('chartTitle');
            chartTitle.innerHTML = 'Son 1 Dakika';

            showCurrent = true;
        }

        $('#datepicker').datepicker({
            maxDate: 0,
            currentText: 'Anlık Durum',
            showButtonPanel: true,
            onSelect: function (dateText) {
                if (selectedPanelId != null) {
                    clearChart();

                    var chartTitle = document.getElementById('chartTitle');

                    showCurrent = false;

                    var selectedDate = new Date(dateText);
                    var nextDay = addDays(selectedDate, 1);

                    chartTitle.innerHTML = $.datepicker.formatDate('dd.mm.yy', selectedDate);

                    socket.emit('retrievePanelDataWithDate', selectedPanelId,
                            selectedDate, nextDay);
                }
            }
        });